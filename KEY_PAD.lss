
KEY_PAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000027  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000180  00000000  00000000  00000229  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e7  00000000  00000000  000003a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000020f  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c9  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000230  00000000  00000000  00000799  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  000009c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  64:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <get_key>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
unsigned char get_key(void);
unsigned char get_key(void)
{
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	50 e0       	ldi	r21, 0x00	; 0
	char key_val=0;
	for (count=0;count<4;count++)

	{
		PORTA=(PORTA|0xF0);
		PORTA=PORTA&(~(0x10<<count));
  70:	e0 e1       	ldi	r30, 0x10	; 16
  72:	f0 e0       	ldi	r31, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  74:	64 ef       	ldi	r22, 0xF4	; 244
  76:	71 e0       	ldi	r23, 0x01	; 1
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
unsigned char get_key(void);
unsigned char get_key(void)
{
  78:	34 2f       	mov	r19, r20
	char row_val;
	char key_val=0;
	for (count=0;count<4;count++)

	{
		PORTA=(PORTA|0xF0);
  7a:	8b b3       	in	r24, 0x1b	; 27
  7c:	80 6f       	ori	r24, 0xF0	; 240
  7e:	8b bb       	out	0x1b, r24	; 27
		PORTA=PORTA&(~(0x10<<count));
  80:	2b b3       	in	r18, 0x1b	; 27
  82:	cf 01       	movw	r24, r30
  84:	04 2e       	mov	r0, r20
  86:	02 c0       	rjmp	.+4      	; 0x8c <get_key+0x20>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	0a 94       	dec	r0
  8e:	e2 f7       	brpl	.-8      	; 0x88 <get_key+0x1c>
  90:	80 95       	com	r24
  92:	82 23       	and	r24, r18
  94:	8b bb       	out	0x1b, r24	; 27
  96:	cb 01       	movw	r24, r22
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <get_key+0x2c>
		_delay_ms(2);
		row_val=PINA&0x0F;
  9c:	99 b3       	in	r25, 0x19	; 25
  9e:	9f 70       	andi	r25, 0x0F	; 15
		if (row_val!=0x0F)
  a0:	9f 30       	cpi	r25, 0x0F	; 15
  a2:	29 f0       	breq	.+10     	; 0xae <get_key+0x42>
		{
			while((PINA&0x0F)!=0x0F);
  a4:	89 b3       	in	r24, 0x19	; 25
  a6:	8f 70       	andi	r24, 0x0F	; 15
  a8:	8f 30       	cpi	r24, 0x0F	; 15
  aa:	e1 f7       	brne	.-8      	; 0xa4 <get_key+0x38>
  ac:	06 c0       	rjmp	.+12     	; 0xba <get_key+0x4e>
  ae:	3f 5f       	subi	r19, 0xFF	; 255
  b0:	4f 5f       	subi	r20, 0xFF	; 255
  b2:	5f 4f       	sbci	r21, 0xFF	; 255
unsigned char get_key(void)
{
	char count=0;
	char row_val;
	char key_val=0;
	for (count=0;count<4;count++)
  b4:	44 30       	cpi	r20, 0x04	; 4
  b6:	51 05       	cpc	r21, r1
  b8:	f9 f6       	brne	.-66     	; 0x78 <get_key+0xc>
			while((PINA&0x0F)!=0x0F);
			break;
				
		}
	}
	switch (count)
  ba:	31 30       	cpi	r19, 0x01	; 1
  bc:	b1 f0       	breq	.+44     	; 0xea <get_key+0x7e>
  be:	31 30       	cpi	r19, 0x01	; 1
  c0:	30 f0       	brcs	.+12     	; 0xce <get_key+0x62>
  c2:	32 30       	cpi	r19, 0x02	; 2
  c4:	29 f1       	breq	.+74     	; 0x110 <get_key+0xa4>
  c6:	33 30       	cpi	r19, 0x03	; 3
  c8:	09 f0       	breq	.+2      	; 0xcc <get_key+0x60>
  ca:	48 c0       	rjmp	.+144    	; 0x15c <get_key+0xf0>
  cc:	34 c0       	rjmp	.+104    	; 0x136 <get_key+0xca>
	{
	case 0:
			{
				switch (row_val){
  ce:	9b 30       	cpi	r25, 0x0B	; 11
  d0:	41 f0       	breq	.+16     	; 0xe2 <get_key+0x76>
  d2:	9d 30       	cpi	r25, 0x0D	; 13
  d4:	21 f0       	breq	.+8      	; 0xde <get_key+0x72>
  d6:	97 30       	cpi	r25, 0x07	; 7
  d8:	09 f0       	breq	.+2      	; 0xdc <get_key+0x70>
  da:	40 c0       	rjmp	.+128    	; 0x15c <get_key+0xf0>
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <get_key+0x7a>
  de:	84 e0       	ldi	r24, 0x04	; 4
  e0:	08 95       	ret
  e2:	88 e0       	ldi	r24, 0x08	; 8
  e4:	08 95       	ret
				case 0x0E:  key_val=0;break;
				case 0x0D:  key_val=4;break;
				case 0x0B:  key_val=8;break;
  e6:	8c e0       	ldi	r24, 0x0C	; 12
  e8:	08 95       	ret
				case 0x07:  key_val=12;break;}
			}break;
	case 1:
 			{
				switch (row_val){
  ea:	9b 30       	cpi	r25, 0x0B	; 11
  ec:	69 f0       	breq	.+26     	; 0x108 <get_key+0x9c>
  ee:	9c 30       	cpi	r25, 0x0C	; 12
  f0:	18 f4       	brcc	.+6      	; 0xf8 <get_key+0x8c>
  f2:	97 30       	cpi	r25, 0x07	; 7
  f4:	99 f5       	brne	.+102    	; 0x15c <get_key+0xf0>
  f6:	0a c0       	rjmp	.+20     	; 0x10c <get_key+0xa0>
  f8:	9d 30       	cpi	r25, 0x0D	; 13
  fa:	21 f0       	breq	.+8      	; 0x104 <get_key+0x98>
  fc:	9e 30       	cpi	r25, 0x0E	; 14
  fe:	71 f5       	brne	.+92     	; 0x15c <get_key+0xf0>
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	08 95       	ret
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	08 95       	ret
				case 0x0E:  key_val=1;break;
				case 0x0D:  key_val=5;break;
 108:	89 e0       	ldi	r24, 0x09	; 9
 10a:	08 95       	ret
				case 0x0B:  key_val=9;break;
 10c:	8d e0       	ldi	r24, 0x0D	; 13
 10e:	08 95       	ret
				case 0x07:  key_val=13;break;}break;
			}
	case 2:
			{
				switch(row_val){
 110:	9b 30       	cpi	r25, 0x0B	; 11
 112:	69 f0       	breq	.+26     	; 0x12e <get_key+0xc2>
 114:	9c 30       	cpi	r25, 0x0C	; 12
 116:	18 f4       	brcc	.+6      	; 0x11e <get_key+0xb2>
 118:	97 30       	cpi	r25, 0x07	; 7
 11a:	01 f5       	brne	.+64     	; 0x15c <get_key+0xf0>
 11c:	0a c0       	rjmp	.+20     	; 0x132 <get_key+0xc6>
 11e:	9d 30       	cpi	r25, 0x0D	; 13
 120:	21 f0       	breq	.+8      	; 0x12a <get_key+0xbe>
 122:	9e 30       	cpi	r25, 0x0E	; 14
 124:	d9 f4       	brne	.+54     	; 0x15c <get_key+0xf0>
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	08 95       	ret
 12a:	86 e0       	ldi	r24, 0x06	; 6
 12c:	08 95       	ret
				case 0x0E:  key_val=2;break;
				case 0x0D:  key_val=6;break;
 12e:	8a e0       	ldi	r24, 0x0A	; 10
 130:	08 95       	ret
				case 0x0B:  key_val=10;break;
 132:	8e e0       	ldi	r24, 0x0E	; 14
 134:	08 95       	ret
				case 0x07:  key_val=14;break;}break;
			}
	case 3:
			{
				switch(row_val){
 136:	9b 30       	cpi	r25, 0x0B	; 11
 138:	69 f0       	breq	.+26     	; 0x154 <get_key+0xe8>
 13a:	9c 30       	cpi	r25, 0x0C	; 12
 13c:	18 f4       	brcc	.+6      	; 0x144 <get_key+0xd8>
 13e:	97 30       	cpi	r25, 0x07	; 7
 140:	69 f4       	brne	.+26     	; 0x15c <get_key+0xf0>
 142:	0a c0       	rjmp	.+20     	; 0x158 <get_key+0xec>
 144:	9d 30       	cpi	r25, 0x0D	; 13
 146:	21 f0       	breq	.+8      	; 0x150 <get_key+0xe4>
 148:	9e 30       	cpi	r25, 0x0E	; 14
 14a:	41 f4       	brne	.+16     	; 0x15c <get_key+0xf0>
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	08 95       	ret
 150:	87 e0       	ldi	r24, 0x07	; 7
 152:	08 95       	ret
				case 0x0E:  key_val=3;break;
				case 0x00D: key_val=7;break;
 154:	8b e0       	ldi	r24, 0x0B	; 11
 156:	08 95       	ret
				case 0x00B: key_val=11;break;
 158:	8f e0       	ldi	r24, 0x0F	; 15
 15a:	08 95       	ret
 15c:	80 e0       	ldi	r24, 0x00	; 0
				case 0x07:  key_val=15;break;}break;
			}
			}
			return key_val;

 		}
 15e:	08 95       	ret

00000160 <main>:
int main()
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
	DDRA=0xF0;
 164:	90 ef       	ldi	r25, 0xF0	; 240
 166:	9a bb       	out	0x1a, r25	; 26
	PORTA=0xFF;
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	8b bb       	out	0x1b, r24	; 27
	DDRB=0xFF;
 16c:	87 bb       	out	0x17, r24	; 23
	PORTB=0xF0;
 16e:	98 bb       	out	0x18, r25	; 24
 170:	c9 e1       	ldi	r28, 0x19	; 25
 172:	d0 e0       	ldi	r29, 0x00	; 0
	while(1){
	PORTB=get_key();
 174:	0e 94 36 00 	call	0x6c	; 0x6c <get_key>
 178:	88 bb       	out	0x18, r24	; 24
 17a:	80 e1       	ldi	r24, 0x10	; 16
 17c:	97 e2       	ldi	r25, 0x27	; 39
 17e:	fe 01       	movw	r30, r28
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 184:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 186:	d9 f7       	brne	.-10     	; 0x17e <main+0x1e>
 188:	f5 cf       	rjmp	.-22     	; 0x174 <main+0x14>

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
