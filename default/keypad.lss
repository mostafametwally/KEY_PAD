
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000754  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000007c8  2**0
                  ALLOC
  2 .debug_aranges 000000e0  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000015f  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009f9  00000000  00000000  00000a07  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000004ab  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000dff  00000000  00000000  000018ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000140  00000000  00000000  000026ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e1  00000000  00000000  000027ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000346  00000000  00000000  000029cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00002d13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 cc 02 	call	0x598	; 0x598 <main>
  74:	0c 94 a8 03 	jmp	0x750	; 0x750 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <compare>:
#include <util/delay.h>
#include "PEREFERALS.h"
char compare(char *pass_word)
{
  7c:	ef 92       	push	r14
  7e:	ff 92       	push	r15
  80:	1f 93       	push	r17
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	ec 01       	movw	r28, r24
	char key[4]={0,0,0,0};
	TWI_SEND_START();
  88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
	TWI_WRITE( slave_address_write );
  8c:	80 ea       	ldi	r24, 0xA0	; 160
  8e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
	TWI_WRITE(0x00);
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
	TWI_SEND_START();
  98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
	TWI_WRITE( slave_address_read);
  9c:	81 ea       	ldi	r24, 0xA1	; 161
  9e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
	key[0]=TWI_READ();
  a2:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
  a6:	18 2f       	mov	r17, r24
	TWI_SEND_STOP();
  a8:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ac:	40 e2       	ldi	r20, 0x20	; 32
  ae:	e4 2e       	mov	r14, r20
  b0:	4e e4       	ldi	r20, 0x4E	; 78
  b2:	f4 2e       	mov	r15, r20
  b4:	c7 01       	movw	r24, r14
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <compare+0x3a>
	_delay_ms(10);
	if(key[0]==pass_word[0])
  ba:	88 81       	ld	r24, Y
  bc:	18 17       	cp	r17, r24
  be:	09 f0       	breq	.+2      	; 0xc2 <compare+0x46>
  c0:	47 c0       	rjmp	.+142    	; 0x150 <compare+0xd4>
	{
		TWI_SEND_START();
  c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
		TWI_WRITE( slave_address_write );
  c6:	80 ea       	ldi	r24, 0xA0	; 160
  c8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
		TWI_WRITE(0x01);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
		TWI_SEND_START();
  d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
		TWI_WRITE( slave_address_read);
  d6:	81 ea       	ldi	r24, 0xA1	; 161
  d8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
		key[1]=TWI_READ();
  dc:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
  e0:	18 2f       	mov	r17, r24
		TWI_SEND_STOP();
  e2:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
  e6:	c7 01       	movw	r24, r14
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <compare+0x6c>
		_delay_ms(10);
		if(key[1]==pass_word[1])
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	18 17       	cp	r17, r24
  f0:	79 f5       	brne	.+94     	; 0x150 <compare+0xd4>
		{
			TWI_SEND_START();
  f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
			TWI_WRITE( slave_address_write );
  f6:	80 ea       	ldi	r24, 0xA0	; 160
  f8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(0x02);
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_SEND_START();
 102:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
			TWI_WRITE( slave_address_read);
 106:	81 ea       	ldi	r24, 0xA1	; 161
 108:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			key[2]=TWI_READ();
 10c:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 110:	18 2f       	mov	r17, r24
			TWI_SEND_STOP();
 112:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
 116:	c7 01       	movw	r24, r14
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <compare+0x9c>
			_delay_ms(10);
		
			if(key[2]==pass_word[2])
 11c:	8a 81       	ldd	r24, Y+2	; 0x02
 11e:	18 17       	cp	r17, r24
 120:	b9 f4       	brne	.+46     	; 0x150 <compare+0xd4>
			{
				TWI_SEND_START();
 122:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
				TWI_WRITE( slave_address_write );
 126:	80 ea       	ldi	r24, 0xA0	; 160
 128:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
				TWI_WRITE(0x03);
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
				TWI_SEND_START();
 132:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
				TWI_WRITE( slave_address_read);
 136:	81 ea       	ldi	r24, 0xA1	; 161
 138:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
				key[3]=TWI_READ();
 13c:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 140:	18 2f       	mov	r17, r24
				TWI_SEND_STOP();
 142:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
				if(key[3]==pass_word[3])
 146:	8b 81       	ldd	r24, Y+3	; 0x03
 148:	18 17       	cp	r17, r24
 14a:	11 f4       	brne	.+4      	; 0x150 <compare+0xd4>
 14c:	8b e0       	ldi	r24, 0x0B	; 11
 14e:	91 c1       	rjmp	.+802    	; 0x472 <__stack+0x13>
		else ;
	}
	
//====================================================
//====================================================
	TWI_SEND_START();
 150:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
	TWI_WRITE( slave_address_write );
 154:	80 ea       	ldi	r24, 0xA0	; 160
 156:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
	TWI_WRITE(0x04);
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
	TWI_SEND_START();
 160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
	TWI_WRITE( slave_address_read);
 164:	81 ea       	ldi	r24, 0xA1	; 161
 166:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
	key[0]=TWI_READ();
 16a:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 16e:	18 2f       	mov	r17, r24
	TWI_SEND_STOP();
 170:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
 174:	30 e2       	ldi	r19, 0x20	; 32
 176:	e3 2e       	mov	r14, r19
 178:	3e e4       	ldi	r19, 0x4E	; 78
 17a:	f3 2e       	mov	r15, r19
 17c:	c7 01       	movw	r24, r14
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <compare+0x102>
	_delay_ms(10);
	if(key[0]==pass_word[0])
 182:	88 81       	ld	r24, Y
 184:	18 17       	cp	r17, r24
 186:	09 f0       	breq	.+2      	; 0x18a <compare+0x10e>
 188:	47 c0       	rjmp	.+142    	; 0x218 <compare+0x19c>
	{
		TWI_SEND_START();
 18a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
		TWI_WRITE( slave_address_write );
 18e:	80 ea       	ldi	r24, 0xA0	; 160
 190:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
		TWI_WRITE(0x05);
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
		TWI_SEND_START();
 19a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
		TWI_WRITE( slave_address_read);
 19e:	81 ea       	ldi	r24, 0xA1	; 161
 1a0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
		key[1]=TWI_READ();
 1a4:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 1a8:	18 2f       	mov	r17, r24
		TWI_SEND_STOP();
 1aa:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
 1ae:	c7 01       	movw	r24, r14
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <compare+0x134>
		_delay_ms(10);
		if(key[1]==pass_word[1])
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	18 17       	cp	r17, r24
 1b8:	79 f5       	brne	.+94     	; 0x218 <compare+0x19c>
		{
			TWI_SEND_START();
 1ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
			TWI_WRITE( slave_address_write );
 1be:	80 ea       	ldi	r24, 0xA0	; 160
 1c0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(0x06);
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_SEND_START();
 1ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
			TWI_WRITE( slave_address_read);
 1ce:	81 ea       	ldi	r24, 0xA1	; 161
 1d0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			key[2]=TWI_READ();
 1d4:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 1d8:	18 2f       	mov	r17, r24
			TWI_SEND_STOP();
 1da:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
 1de:	c7 01       	movw	r24, r14
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <compare+0x164>
			_delay_ms(10);
			
			if(key[2]==pass_word[2])
 1e4:	8a 81       	ldd	r24, Y+2	; 0x02
 1e6:	18 17       	cp	r17, r24
 1e8:	b9 f4       	brne	.+46     	; 0x218 <compare+0x19c>
			{
				TWI_SEND_START();
 1ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
				TWI_WRITE( slave_address_write );
 1ee:	80 ea       	ldi	r24, 0xA0	; 160
 1f0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
				TWI_WRITE(0x07);
 1f4:	87 e0       	ldi	r24, 0x07	; 7
 1f6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
				TWI_SEND_START();
 1fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
				TWI_WRITE( slave_address_read);
 1fe:	81 ea       	ldi	r24, 0xA1	; 161
 200:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
				key[3]=TWI_READ();
 204:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 208:	18 2f       	mov	r17, r24
				TWI_SEND_STOP();
 20a:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
				if(key[3]==pass_word[3])
 20e:	8b 81       	ldd	r24, Y+3	; 0x03
 210:	18 17       	cp	r17, r24
 212:	11 f4       	brne	.+4      	; 0x218 <compare+0x19c>
 214:	8c e0       	ldi	r24, 0x0C	; 12
 216:	2d c1       	rjmp	.+602    	; 0x472 <__stack+0x13>
	}

//========================================================
//========================================================

		TWI_SEND_START();
 218:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
	TWI_WRITE( slave_address_write );
 21c:	80 ea       	ldi	r24, 0xA0	; 160
 21e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
	TWI_WRITE(0x08);
 222:	88 e0       	ldi	r24, 0x08	; 8
 224:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
	TWI_SEND_START();
 228:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
	TWI_WRITE( slave_address_read);
 22c:	81 ea       	ldi	r24, 0xA1	; 161
 22e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
	key[0]=TWI_READ();
 232:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 236:	18 2f       	mov	r17, r24
	TWI_SEND_STOP();
 238:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
 23c:	20 e2       	ldi	r18, 0x20	; 32
 23e:	e2 2e       	mov	r14, r18
 240:	2e e4       	ldi	r18, 0x4E	; 78
 242:	f2 2e       	mov	r15, r18
 244:	c7 01       	movw	r24, r14
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <compare+0x1ca>
	_delay_ms(10);
	if(key[0]==pass_word[0])
 24a:	88 81       	ld	r24, Y
 24c:	18 17       	cp	r17, r24
 24e:	09 f0       	breq	.+2      	; 0x252 <compare+0x1d6>
 250:	47 c0       	rjmp	.+142    	; 0x2e0 <compare+0x264>
	{
		TWI_SEND_START();
 252:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
		TWI_WRITE( slave_address_write );
 256:	80 ea       	ldi	r24, 0xA0	; 160
 258:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
		TWI_WRITE(0x09);
 25c:	89 e0       	ldi	r24, 0x09	; 9
 25e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
		TWI_SEND_START();
 262:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
		TWI_WRITE( slave_address_read);
 266:	81 ea       	ldi	r24, 0xA1	; 161
 268:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
		key[1]=TWI_READ();
 26c:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 270:	18 2f       	mov	r17, r24
		TWI_SEND_STOP();
 272:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
 276:	c7 01       	movw	r24, r14
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <compare+0x1fc>
		_delay_ms(10);
		if(key[1]==pass_word[1])
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	18 17       	cp	r17, r24
 280:	79 f5       	brne	.+94     	; 0x2e0 <compare+0x264>
		{
			TWI_SEND_START();
 282:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
			TWI_WRITE( slave_address_write );
 286:	80 ea       	ldi	r24, 0xA0	; 160
 288:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(0x0A);
 28c:	8a e0       	ldi	r24, 0x0A	; 10
 28e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_SEND_START();
 292:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
			TWI_WRITE( slave_address_read);
 296:	81 ea       	ldi	r24, 0xA1	; 161
 298:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			key[2]=TWI_READ();
 29c:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 2a0:	18 2f       	mov	r17, r24
			TWI_SEND_STOP();
 2a2:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
 2a6:	c7 01       	movw	r24, r14
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <compare+0x22c>
			_delay_ms(10);
			
			if(key[2]==pass_word[2])
 2ac:	8a 81       	ldd	r24, Y+2	; 0x02
 2ae:	18 17       	cp	r17, r24
 2b0:	b9 f4       	brne	.+46     	; 0x2e0 <compare+0x264>
			{
				TWI_SEND_START();
 2b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
				TWI_WRITE( slave_address_write );
 2b6:	80 ea       	ldi	r24, 0xA0	; 160
 2b8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
				TWI_WRITE(0x0B);
 2bc:	8b e0       	ldi	r24, 0x0B	; 11
 2be:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
				TWI_SEND_START();
 2c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
				TWI_WRITE( slave_address_read);
 2c6:	81 ea       	ldi	r24, 0xA1	; 161
 2c8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
				key[3]=TWI_READ();
 2cc:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 2d0:	18 2f       	mov	r17, r24
				TWI_SEND_STOP();
 2d2:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
				if(key[3]==pass_word[3])
 2d6:	8b 81       	ldd	r24, Y+3	; 0x03
 2d8:	18 17       	cp	r17, r24
 2da:	11 f4       	brne	.+4      	; 0x2e0 <compare+0x264>
 2dc:	8d e0       	ldi	r24, 0x0D	; 13
 2de:	c9 c0       	rjmp	.+402    	; 0x472 <__stack+0x13>
		}
		else ;
	}
//====================================================
//====================================================
		TWI_SEND_START();
 2e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
	TWI_WRITE( slave_address_write );
 2e4:	80 ea       	ldi	r24, 0xA0	; 160
 2e6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
	TWI_WRITE(0x0C);
 2ea:	8c e0       	ldi	r24, 0x0C	; 12
 2ec:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
	TWI_SEND_START();
 2f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
	TWI_WRITE( slave_address_read);
 2f4:	81 ea       	ldi	r24, 0xA1	; 161
 2f6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
	key[0]=TWI_READ();
 2fa:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 2fe:	18 2f       	mov	r17, r24
	TWI_SEND_STOP();
 300:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
 304:	90 e2       	ldi	r25, 0x20	; 32
 306:	e9 2e       	mov	r14, r25
 308:	9e e4       	ldi	r25, 0x4E	; 78
 30a:	f9 2e       	mov	r15, r25
 30c:	c7 01       	movw	r24, r14
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <compare+0x292>
	_delay_ms(10);
	if(key[0]==pass_word[0])
 312:	88 81       	ld	r24, Y
 314:	18 17       	cp	r17, r24
 316:	09 f0       	breq	.+2      	; 0x31a <compare+0x29e>
 318:	47 c0       	rjmp	.+142    	; 0x3a8 <compare+0x32c>
	{
		TWI_SEND_START();
 31a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
		TWI_WRITE( slave_address_write );
 31e:	80 ea       	ldi	r24, 0xA0	; 160
 320:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
		TWI_WRITE(0x0D);
 324:	8d e0       	ldi	r24, 0x0D	; 13
 326:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
		TWI_SEND_START();
 32a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
		TWI_WRITE( slave_address_read);
 32e:	81 ea       	ldi	r24, 0xA1	; 161
 330:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
		key[1]=TWI_READ();
 334:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 338:	18 2f       	mov	r17, r24
		TWI_SEND_STOP();
 33a:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
 33e:	c7 01       	movw	r24, r14
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <compare+0x2c4>
		_delay_ms(10);
		if(key[1]==pass_word[1])
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	18 17       	cp	r17, r24
 348:	79 f5       	brne	.+94     	; 0x3a8 <compare+0x32c>
		{
			TWI_SEND_START();
 34a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
			TWI_WRITE( slave_address_write );
 34e:	80 ea       	ldi	r24, 0xA0	; 160
 350:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(0x0E);
 354:	8e e0       	ldi	r24, 0x0E	; 14
 356:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_SEND_START();
 35a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
			TWI_WRITE( slave_address_read);
 35e:	81 ea       	ldi	r24, 0xA1	; 161
 360:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			key[2]=TWI_READ();
 364:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 368:	18 2f       	mov	r17, r24
			TWI_SEND_STOP();
 36a:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
 36e:	c7 01       	movw	r24, r14
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <compare+0x2f4>
			_delay_ms(10);
			
			if(key[2]==pass_word[2])
 374:	8a 81       	ldd	r24, Y+2	; 0x02
 376:	18 17       	cp	r17, r24
 378:	b9 f4       	brne	.+46     	; 0x3a8 <compare+0x32c>
			{
				TWI_SEND_START();
 37a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
				TWI_WRITE( slave_address_write );
 37e:	80 ea       	ldi	r24, 0xA0	; 160
 380:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
				TWI_WRITE(0x0F);
 384:	8f e0       	ldi	r24, 0x0F	; 15
 386:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
				TWI_SEND_START();
 38a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
				TWI_WRITE( slave_address_read);
 38e:	81 ea       	ldi	r24, 0xA1	; 161
 390:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
				key[3]=TWI_READ();
 394:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 398:	18 2f       	mov	r17, r24
				TWI_SEND_STOP();
 39a:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
				if(key[3]==pass_word[3])
 39e:	8b 81       	ldd	r24, Y+3	; 0x03
 3a0:	18 17       	cp	r17, r24
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <compare+0x32c>
 3a4:	8e e0       	ldi	r24, 0x0E	; 14
 3a6:	65 c0       	rjmp	.+202    	; 0x472 <__stack+0x13>
		}
		else ;
	}
	//==========================================================================
	//==================================================================
	TWI_SEND_START();
 3a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
	TWI_WRITE( slave_address_write );
 3ac:	80 ea       	ldi	r24, 0xA0	; 160
 3ae:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
	TWI_WRITE(0x10);
 3b2:	80 e1       	ldi	r24, 0x10	; 16
 3b4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
	TWI_SEND_START();
 3b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
	TWI_WRITE( slave_address_read);
 3bc:	81 ea       	ldi	r24, 0xA1	; 161
 3be:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
	key[0]=TWI_READ();
 3c2:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 3c6:	18 2f       	mov	r17, r24
	TWI_SEND_STOP();
 3c8:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
 3cc:	80 e2       	ldi	r24, 0x20	; 32
 3ce:	e8 2e       	mov	r14, r24
 3d0:	8e e4       	ldi	r24, 0x4E	; 78
 3d2:	f8 2e       	mov	r15, r24
 3d4:	c7 01       	movw	r24, r14
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <compare+0x35a>
	_delay_ms(10);
	if(key[0]==pass_word[0])
 3da:	88 81       	ld	r24, Y
 3dc:	18 17       	cp	r17, r24
 3de:	09 f0       	breq	.+2      	; 0x3e2 <compare+0x366>
 3e0:	47 c0       	rjmp	.+142    	; 0x470 <__stack+0x11>
	{
		TWI_SEND_START();
 3e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
		TWI_WRITE( slave_address_write );
 3e6:	80 ea       	ldi	r24, 0xA0	; 160
 3e8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
		TWI_WRITE(0x11);
 3ec:	81 e1       	ldi	r24, 0x11	; 17
 3ee:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
		TWI_SEND_START();
 3f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
		TWI_WRITE( slave_address_read);
 3f6:	81 ea       	ldi	r24, 0xA1	; 161
 3f8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
		key[1]=TWI_READ();
 3fc:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 400:	18 2f       	mov	r17, r24
		TWI_SEND_STOP();
 402:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
 406:	c7 01       	movw	r24, r14
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <compare+0x38c>
		_delay_ms(10);
		if(key[1]==pass_word[1])
 40c:	89 81       	ldd	r24, Y+1	; 0x01
 40e:	18 17       	cp	r17, r24
 410:	79 f5       	brne	.+94     	; 0x470 <__stack+0x11>
		{
			TWI_SEND_START();
 412:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
			TWI_WRITE( slave_address_write );
 416:	80 ea       	ldi	r24, 0xA0	; 160
 418:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(0x12);
 41c:	82 e1       	ldi	r24, 0x12	; 18
 41e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_SEND_START();
 422:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
			TWI_WRITE( slave_address_read);
 426:	81 ea       	ldi	r24, 0xA1	; 161
 428:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			key[2]=TWI_READ();
 42c:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 430:	18 2f       	mov	r17, r24
			TWI_SEND_STOP();
 432:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
 436:	c7 01       	movw	r24, r14
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <compare+0x3bc>
			_delay_ms(10);
		
			if(key[2]==pass_word[2])
 43c:	8a 81       	ldd	r24, Y+2	; 0x02
 43e:	18 17       	cp	r17, r24
 440:	b9 f4       	brne	.+46     	; 0x470 <__stack+0x11>
			{
				TWI_SEND_START();
 442:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
				TWI_WRITE( slave_address_write );
 446:	80 ea       	ldi	r24, 0xA0	; 160
 448:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
				TWI_WRITE(0x13);
 44c:	83 e1       	ldi	r24, 0x13	; 19
 44e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
				TWI_SEND_START();
 452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
				TWI_WRITE( slave_address_read);
 456:	81 ea       	ldi	r24, 0xA1	; 161
 458:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
				key[3]=TWI_READ();
 45c:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_READ>
 460:	18 2f       	mov	r17, r24
				TWI_SEND_STOP();
 462:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
				if(key[3]==pass_word[3])
 466:	8b 81       	ldd	r24, Y+3	; 0x03
 468:	18 17       	cp	r17, r24
 46a:	11 f4       	brne	.+4      	; 0x470 <__stack+0x11>
 46c:	80 e1       	ldi	r24, 0x10	; 16
 46e:	01 c0       	rjmp	.+2      	; 0x472 <__stack+0x13>
 470:	8f e0       	ldi	r24, 0x0F	; 15
	}
	//=======================================================================
	//========================================================================
	 return 15;
	
}
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	1f 91       	pop	r17
 478:	ff 90       	pop	r15
 47a:	ef 90       	pop	r14
 47c:	08 95       	ret

0000047e <KEY_PAD_GET_KEY>:
#include <avr/io.h>
#include <util/delay.h>
extern char flag;
char KEY_PAD_GET_KEY(void)
{
 47e:	40 e0       	ldi	r20, 0x00	; 0
 480:	50 e0       	ldi	r21, 0x00	; 0
	static char key_val=0;
	for (count=0;count<4;count++)

	{
		PORTA=(PORTA|0xF0);
		PORTA=PORTA&(~(0x10<<count));
 482:	e0 e1       	ldi	r30, 0x10	; 16
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	60 e1       	ldi	r22, 0x10	; 16
 488:	77 e2       	ldi	r23, 0x27	; 39
#include <avr/io.h>
#include <util/delay.h>
extern char flag;
char KEY_PAD_GET_KEY(void)
{
 48a:	34 2f       	mov	r19, r20
	char count=4;
	static char key_val=0;
	for (count=0;count<4;count++)

	{
		PORTA=(PORTA|0xF0);
 48c:	8b b3       	in	r24, 0x1b	; 27
 48e:	80 6f       	ori	r24, 0xF0	; 240
 490:	8b bb       	out	0x1b, r24	; 27
		PORTA=PORTA&(~(0x10<<count));
 492:	2b b3       	in	r18, 0x1b	; 27
 494:	cf 01       	movw	r24, r30
 496:	04 2e       	mov	r0, r20
 498:	02 c0       	rjmp	.+4      	; 0x49e <KEY_PAD_GET_KEY+0x20>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	0a 94       	dec	r0
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <KEY_PAD_GET_KEY+0x1c>
 4a2:	80 95       	com	r24
 4a4:	82 23       	and	r24, r18
 4a6:	8b bb       	out	0x1b, r24	; 27
 4a8:	cb 01       	movw	r24, r22
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <KEY_PAD_GET_KEY+0x2c>
  		_delay_ms(5);
		row_val=PINA&0x0F;
 4ae:	99 b3       	in	r25, 0x19	; 25
 4b0:	9f 70       	andi	r25, 0x0F	; 15
		if (row_val!=0x0F)
 4b2:	9f 30       	cpi	r25, 0x0F	; 15
 4b4:	29 f0       	breq	.+10     	; 0x4c0 <KEY_PAD_GET_KEY+0x42>
		{
			while((PINA&0x0F)!=0x0F);
 4b6:	89 b3       	in	r24, 0x19	; 25
 4b8:	8f 70       	andi	r24, 0x0F	; 15
 4ba:	8f 30       	cpi	r24, 0x0F	; 15
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <KEY_PAD_GET_KEY+0x38>
 4be:	06 c0       	rjmp	.+12     	; 0x4cc <KEY_PAD_GET_KEY+0x4e>
 4c0:	3f 5f       	subi	r19, 0xFF	; 255
 4c2:	4f 5f       	subi	r20, 0xFF	; 255
 4c4:	5f 4f       	sbci	r21, 0xFF	; 255
char KEY_PAD_GET_KEY(void)
{
	char row_val=0;
	char count=4;
	static char key_val=0;
	for (count=0;count<4;count++)
 4c6:	44 30       	cpi	r20, 0x04	; 4
 4c8:	51 05       	cpc	r21, r1
 4ca:	f9 f6       	brne	.-66     	; 0x48a <KEY_PAD_GET_KEY+0xc>
			break;}


		}

	switch (count)
 4cc:	31 30       	cpi	r19, 0x01	; 1
 4ce:	f9 f0       	breq	.+62     	; 0x50e <KEY_PAD_GET_KEY+0x90>
 4d0:	31 30       	cpi	r19, 0x01	; 1
 4d2:	30 f0       	brcs	.+12     	; 0x4e0 <KEY_PAD_GET_KEY+0x62>
 4d4:	32 30       	cpi	r19, 0x02	; 2
 4d6:	99 f1       	breq	.+102    	; 0x53e <KEY_PAD_GET_KEY+0xc0>
 4d8:	33 30       	cpi	r19, 0x03	; 3
 4da:	09 f0       	breq	.+2      	; 0x4de <KEY_PAD_GET_KEY+0x60>
 4dc:	5a c0       	rjmp	.+180    	; 0x592 <KEY_PAD_GET_KEY+0x114>
 4de:	42 c0       	rjmp	.+132    	; 0x564 <KEY_PAD_GET_KEY+0xe6>
	{
	case 0:
			{
				switch (row_val){//column 0 row 0,1,2,3
 4e0:	9b 30       	cpi	r25, 0x0B	; 11
 4e2:	79 f0       	breq	.+30     	; 0x502 <KEY_PAD_GET_KEY+0x84>
 4e4:	9c 30       	cpi	r25, 0x0C	; 12
 4e6:	20 f4       	brcc	.+8      	; 0x4f0 <KEY_PAD_GET_KEY+0x72>
 4e8:	97 30       	cpi	r25, 0x07	; 7
 4ea:	09 f0       	breq	.+2      	; 0x4ee <KEY_PAD_GET_KEY+0x70>
 4ec:	52 c0       	rjmp	.+164    	; 0x592 <KEY_PAD_GET_KEY+0x114>
 4ee:	0d c0       	rjmp	.+26     	; 0x50a <KEY_PAD_GET_KEY+0x8c>
 4f0:	9d 30       	cpi	r25, 0x0D	; 13
 4f2:	29 f0       	breq	.+10     	; 0x4fe <KEY_PAD_GET_KEY+0x80>
 4f4:	9e 30       	cpi	r25, 0x0E	; 14
 4f6:	09 f0       	breq	.+2      	; 0x4fa <KEY_PAD_GET_KEY+0x7c>
 4f8:	4c c0       	rjmp	.+152    	; 0x592 <KEY_PAD_GET_KEY+0x114>
				case 0x0E:  key_val=7;flag=1;break;
 4fa:	87 e0       	ldi	r24, 0x07	; 7
 4fc:	45 c0       	rjmp	.+138    	; 0x588 <KEY_PAD_GET_KEY+0x10a>
				case 0x0D:  key_val=4;flag=1;break;
 4fe:	84 e0       	ldi	r24, 0x04	; 4
 500:	43 c0       	rjmp	.+134    	; 0x588 <KEY_PAD_GET_KEY+0x10a>
				case 0x0B:  key_val=1;flag=1;break;
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	80 93 60 00 	sts	0x0060, r24
 508:	42 c0       	rjmp	.+132    	; 0x58e <KEY_PAD_GET_KEY+0x110>
				case 0x07:  key_val=16;flag=1;break;}
 50a:	80 e1       	ldi	r24, 0x10	; 16
 50c:	3d c0       	rjmp	.+122    	; 0x588 <KEY_PAD_GET_KEY+0x10a>
			}break;
	case 1:
 			{
				switch (row_val){ //column 1 row 0,1,2,3
 50e:	9b 30       	cpi	r25, 0x0B	; 11
 510:	79 f0       	breq	.+30     	; 0x530 <KEY_PAD_GET_KEY+0xb2>
 512:	9c 30       	cpi	r25, 0x0C	; 12
 514:	18 f4       	brcc	.+6      	; 0x51c <KEY_PAD_GET_KEY+0x9e>
 516:	97 30       	cpi	r25, 0x07	; 7
 518:	e1 f5       	brne	.+120    	; 0x592 <KEY_PAD_GET_KEY+0x114>
 51a:	0c c0       	rjmp	.+24     	; 0x534 <KEY_PAD_GET_KEY+0xb6>
 51c:	9d 30       	cpi	r25, 0x0D	; 13
 51e:	21 f0       	breq	.+8      	; 0x528 <KEY_PAD_GET_KEY+0xaa>
 520:	9e 30       	cpi	r25, 0x0E	; 14
 522:	b9 f5       	brne	.+110    	; 0x592 <KEY_PAD_GET_KEY+0x114>
				case 0x0E:  key_val=8;flag=1;break;
 524:	88 e0       	ldi	r24, 0x08	; 8
 526:	01 c0       	rjmp	.+2      	; 0x52a <KEY_PAD_GET_KEY+0xac>
				case 0x0D:  key_val=5;flag=1;break;
 528:	85 e0       	ldi	r24, 0x05	; 5
 52a:	80 93 60 00 	sts	0x0060, r24
 52e:	04 c0       	rjmp	.+8      	; 0x538 <KEY_PAD_GET_KEY+0xba>
				case 0x0B:  key_val=2;flag=1;break;
 530:	82 e0       	ldi	r24, 0x02	; 2
 532:	fb cf       	rjmp	.-10     	; 0x52a <KEY_PAD_GET_KEY+0xac>
				case 0x07:  key_val=0;flag=1;break;}break;
 534:	10 92 60 00 	sts	0x0060, r1
 538:	30 93 61 00 	sts	0x0061, r19
 53c:	2a c0       	rjmp	.+84     	; 0x592 <KEY_PAD_GET_KEY+0x114>
			}
	case 2:
			{
				switch(row_val){//column 2 row 0,1,2,3
 53e:	9b 30       	cpi	r25, 0x0B	; 11
 540:	69 f0       	breq	.+26     	; 0x55c <KEY_PAD_GET_KEY+0xde>
 542:	9c 30       	cpi	r25, 0x0C	; 12
 544:	18 f4       	brcc	.+6      	; 0x54c <KEY_PAD_GET_KEY+0xce>
 546:	97 30       	cpi	r25, 0x07	; 7
 548:	21 f5       	brne	.+72     	; 0x592 <KEY_PAD_GET_KEY+0x114>
 54a:	0a c0       	rjmp	.+20     	; 0x560 <KEY_PAD_GET_KEY+0xe2>
 54c:	9d 30       	cpi	r25, 0x0D	; 13
 54e:	21 f0       	breq	.+8      	; 0x558 <KEY_PAD_GET_KEY+0xda>
 550:	9e 30       	cpi	r25, 0x0E	; 14
 552:	f9 f4       	brne	.+62     	; 0x592 <KEY_PAD_GET_KEY+0x114>
				case 0x0E:  key_val=9;flag=1;break;
 554:	89 e0       	ldi	r24, 0x09	; 9
 556:	18 c0       	rjmp	.+48     	; 0x588 <KEY_PAD_GET_KEY+0x10a>
				case 0x0D:  key_val=6;flag=1;break;
 558:	86 e0       	ldi	r24, 0x06	; 6
 55a:	16 c0       	rjmp	.+44     	; 0x588 <KEY_PAD_GET_KEY+0x10a>
				case 0x0B:  key_val=3;flag=1;break;
 55c:	83 e0       	ldi	r24, 0x03	; 3
 55e:	14 c0       	rjmp	.+40     	; 0x588 <KEY_PAD_GET_KEY+0x10a>
				case 0x07:  key_val=13;flag=1;break;}break;
 560:	8d e0       	ldi	r24, 0x0D	; 13
 562:	12 c0       	rjmp	.+36     	; 0x588 <KEY_PAD_GET_KEY+0x10a>
			}
	case 3:
			{
				switch(row_val){//column 3 row 0,1,2,3
 564:	9b 30       	cpi	r25, 0x0B	; 11
 566:	69 f0       	breq	.+26     	; 0x582 <KEY_PAD_GET_KEY+0x104>
 568:	9c 30       	cpi	r25, 0x0C	; 12
 56a:	18 f4       	brcc	.+6      	; 0x572 <KEY_PAD_GET_KEY+0xf4>
 56c:	97 30       	cpi	r25, 0x07	; 7
 56e:	89 f4       	brne	.+34     	; 0x592 <KEY_PAD_GET_KEY+0x114>
 570:	0a c0       	rjmp	.+20     	; 0x586 <KEY_PAD_GET_KEY+0x108>
 572:	9d 30       	cpi	r25, 0x0D	; 13
 574:	21 f0       	breq	.+8      	; 0x57e <KEY_PAD_GET_KEY+0x100>
 576:	9e 30       	cpi	r25, 0x0E	; 14
 578:	61 f4       	brne	.+24     	; 0x592 <KEY_PAD_GET_KEY+0x114>
				case 0x0E:  key_val=-1;flag=1;break;
 57a:	8f ef       	ldi	r24, 0xFF	; 255
 57c:	05 c0       	rjmp	.+10     	; 0x588 <KEY_PAD_GET_KEY+0x10a>
				case 0x00D: key_val=-6;flag=1;break;
 57e:	8a ef       	ldi	r24, 0xFA	; 250
 580:	03 c0       	rjmp	.+6      	; 0x588 <KEY_PAD_GET_KEY+0x10a>
				case 0x00B: key_val=-3;flag=1;break;
 582:	8d ef       	ldi	r24, 0xFD	; 253
 584:	01 c0       	rjmp	.+2      	; 0x588 <KEY_PAD_GET_KEY+0x10a>
				case 0x07:  key_val=-5;flag=1;break;}break;
 586:	8b ef       	ldi	r24, 0xFB	; 251
 588:	80 93 60 00 	sts	0x0060, r24
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	80 93 61 00 	sts	0x0061, r24
			}
			}
			return key_val;

 		}
 592:	80 91 60 00 	lds	r24, 0x0060
 596:	08 95       	ret

00000598 <main>:
#include "PEREFERALS.h"

volatile char flag=0;
int main()
	
{
 598:	cf 92       	push	r12
 59a:	df 92       	push	r13
 59c:	ff 92       	push	r15
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	df 93       	push	r29
 5a4:	cf 93       	push	r28
 5a6:	00 d0       	rcall	.+0      	; 0x5a8 <main+0x10>
 5a8:	00 d0       	rcall	.+0      	; 0x5aa <main+0x12>
 5aa:	cd b7       	in	r28, 0x3d	; 61
 5ac:	de b7       	in	r29, 0x3e	; 62
			PORTS_INIT();
 5ae:	0e 94 59 03 	call	0x6b2	; 0x6b2 <PORTS_INIT>
			char pressed_key =0;
			char pass_word[4];
			int i=0;//store # that user entered
			TWI_SEND_START();
 5b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
			TWI_WRITE( slave_address_write );
 5b6:	80 ea       	ldi	r24, 0xA0	; 160
 5b8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(0x00);
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(1);
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(1);
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(1);
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(1);
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			//===========================================
			TWI_WRITE(2);
 5da:	82 e0       	ldi	r24, 0x02	; 2
 5dc:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(2);
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(2);
 5e6:	82 e0       	ldi	r24, 0x02	; 2
 5e8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(2);
 5ec:	82 e0       	ldi	r24, 0x02	; 2
 5ee:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			//===========================================
			TWI_WRITE(2);
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(3);
 5f8:	83 e0       	ldi	r24, 0x03	; 3
 5fa:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(5);
 5fe:	85 e0       	ldi	r24, 0x05	; 5
 600:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(5);
 604:	85 e0       	ldi	r24, 0x05	; 5
 606:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			//===========================================
			TWI_WRITE(4);
 60a:	84 e0       	ldi	r24, 0x04	; 4
 60c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(4);
 610:	84 e0       	ldi	r24, 0x04	; 4
 612:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(4);
 616:	84 e0       	ldi	r24, 0x04	; 4
 618:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(4);
 61c:	84 e0       	ldi	r24, 0x04	; 4
 61e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_SEND_STOP();
 622:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
 626:	00 e2       	ldi	r16, 0x20	; 32
 628:	1e e4       	ldi	r17, 0x4E	; 78
 62a:	c8 01       	movw	r24, r16
 62c:	01 97       	sbiw	r24, 0x01	; 1
 62e:	f1 f7       	brne	.-4      	; 0x62c <main+0x94>
			_delay_ms(10);
			//===========================================
			TWI_SEND_START();
 630:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_SEND_START>
			TWI_WRITE( slave_address_write );
 634:	80 ea       	ldi	r24, 0xA0	; 160
 636:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(0x10);
 63a:	80 e1       	ldi	r24, 0x10	; 16
 63c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(5);
 640:	85 e0       	ldi	r24, 0x05	; 5
 642:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(5);
 646:	85 e0       	ldi	r24, 0x05	; 5
 648:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(5);
 64c:	85 e0       	ldi	r24, 0x05	; 5
 64e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_WRITE(5);
 652:	85 e0       	ldi	r24, 0x05	; 5
 654:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TWI_WRITE>
			TWI_SEND_STOP();
 658:	0e 94 8d 03 	call	0x71a	; 0x71a <TWI_SEND_STOP>
 65c:	c8 01       	movw	r24, r16
 65e:	01 97       	sbiw	r24, 0x01	; 1
 660:	f1 f7       	brne	.-4      	; 0x65e <main+0xc6>
 662:	00 e0       	ldi	r16, 0x00	; 0
 664:	10 e0       	ldi	r17, 0x00	; 0
			SPI_MASTER_SEND(pressed_key+48);
			flag=0;
			
			if (pressed_key!=16)
			{
				pass_word[i++]=pressed_key;
 666:	6e 01       	movw	r12, r28
 668:	08 94       	sec
 66a:	c1 1c       	adc	r12, r1
 66c:	d1 1c       	adc	r13, r1
 66e:	02 c0       	rjmp	.+4      	; 0x674 <main+0xdc>
 670:	00 e0       	ldi	r16, 0x00	; 0
 672:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(10);
			//===========================================
	while(1)
	{		
		
		pressed_key=KEY_PAD_GET_KEY();
 674:	0e 94 3f 02 	call	0x47e	; 0x47e <KEY_PAD_GET_KEY>
 678:	f8 2e       	mov	r15, r24
  		if(flag==1)
 67a:	80 91 61 00 	lds	r24, 0x0061
 67e:	81 30       	cpi	r24, 0x01	; 1
 680:	c9 f7       	brne	.-14     	; 0x674 <main+0xdc>
		{
			
			SPI_MASTER_SEND(pressed_key+48);
 682:	8f 2d       	mov	r24, r15
 684:	80 5d       	subi	r24, 0xD0	; 208
 686:	0e 94 75 03 	call	0x6ea	; 0x6ea <SPI_MASTER_SEND>
			flag=0;
 68a:	10 92 61 00 	sts	0x0061, r1
			
			if (pressed_key!=16)
 68e:	80 e1       	ldi	r24, 0x10	; 16
 690:	f8 16       	cp	r15, r24
 692:	71 f3       	breq	.-36     	; 0x670 <main+0xd8>
			{
				pass_word[i++]=pressed_key;
 694:	f6 01       	movw	r30, r12
 696:	e0 0f       	add	r30, r16
 698:	f1 1f       	adc	r31, r17
 69a:	f0 82       	st	Z, r15
 69c:	0f 5f       	subi	r16, 0xFF	; 255
 69e:	1f 4f       	sbci	r17, 0xFF	; 255
				if (i==4)
 6a0:	04 30       	cpi	r16, 0x04	; 4
 6a2:	11 05       	cpc	r17, r1
 6a4:	39 f7       	brne	.-50     	; 0x674 <main+0xdc>
				{
					SPI_MASTER_SEND(compare(pass_word));
 6a6:	c6 01       	movw	r24, r12
 6a8:	0e 94 3e 00 	call	0x7c	; 0x7c <compare>
 6ac:	0e 94 75 03 	call	0x6ea	; 0x6ea <SPI_MASTER_SEND>
 6b0:	e1 cf       	rjmp	.-62     	; 0x674 <main+0xdc>

000006b2 <PORTS_INIT>:
void PORTS_INIT(void)
{
//=====================================================
//=====================================================
//KEY _PAD INTERFACE
	DDRA=0xF0;
 6b2:	80 ef       	ldi	r24, 0xF0	; 240
 6b4:	8a bb       	out	0x1a, r24	; 26
	PORTA=0xFF;
 6b6:	8f ef       	ldi	r24, 0xFF	; 255
 6b8:	8b bb       	out	0x1b, r24	; 27
	PINA=0xFF;
 6ba:	89 bb       	out	0x19, r24	; 25
//=====================================================
//=====================================================
//SPI communication  PORTB4 to PORTB7
	DDRB=0xBF;
 6bc:	8f eb       	ldi	r24, 0xBF	; 191
 6be:	87 bb       	out	0x17, r24	; 23
	PORTB=0x00;
 6c0:	18 ba       	out	0x18, r1	; 24
	////((1<<6)|(1<<4)|(1<<0));   //SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
	SPCR=0x5C;
 6c2:	8c e5       	ldi	r24, 0x5C	; 92
 6c4:	8d b9       	out	0x0d, r24	; 13
	SPSR=0x00;
 6c6:	1e b8       	out	0x0e, r1	; 14
//=====================================================
//=====================================================
//UART_INITIALIZATION
	UCSRA=0x22;
 6c8:	82 e2       	ldi	r24, 0x22	; 34
 6ca:	8b b9       	out	0x0b, r24	; 11
	UCSRB=0x8F;
 6cc:	8f e8       	ldi	r24, 0x8F	; 143
 6ce:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0x86;
 6d0:	86 e8       	ldi	r24, 0x86	; 134
 6d2:	80 bd       	out	0x20, r24	; 32
	UBRRL=12;
 6d4:	8c e0       	ldi	r24, 0x0C	; 12
 6d6:	89 b9       	out	0x09, r24	; 9
	UBRRH=0;
 6d8:	10 bc       	out	0x20, r1	; 32
//======================================================
//======================================================
//TWI INITIALIZATION
	TWAR=0x04;
 6da:	84 e0       	ldi	r24, 0x04	; 4
 6dc:	82 b9       	out	0x02, r24	; 2
	TWBR=3;
 6de:	83 e0       	ldi	r24, 0x03	; 3
 6e0:	80 b9       	out	0x00, r24	; 0
	TWCR=0x44;
 6e2:	84 e4       	ldi	r24, 0x44	; 68
 6e4:	86 bf       	out	0x36, r24	; 54
	TWSR=0x00;
 6e6:	11 b8       	out	0x01, r1	; 1
}
 6e8:	08 95       	ret

000006ea <SPI_MASTER_SEND>:
#include <avr/io.h>
#include <util/delay.h>
	void SPI_MASTER_SEND(char Data)
	{
		// Start transmission 
			SPDR = Data;
 6ea:	8f b9       	out	0x0f, r24	; 15
		// Wait for transmission complete 
		while(!(SPSR & (1<<SPIF)));
 6ec:	77 9b       	sbis	0x0e, 7	; 14
 6ee:	fe cf       	rjmp	.-4      	; 0x6ec <SPI_MASTER_SEND+0x2>
		
	}
 6f0:	08 95       	ret

000006f2 <TWI_SEND_START>:
#include <util/delay.h>
#include <stdlib.h>

void TWI_SEND_START(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//Send START condition
 6f2:	84 ea       	ldi	r24, 0xA4	; 164
 6f4:	86 bf       	out	0x36, r24	; 54

	//clear interrupt bit ,enable start bit and TWI bit

	while (!(TWCR & (1<<TWINT)));
 6f6:	06 b6       	in	r0, 0x36	; 54
 6f8:	07 fe       	sbrs	r0, 7
 6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <TWI_SEND_START+0x4>


	// Check value of TWI Status Register. Mask prescaler bits
	//$0x08  START condition has been transmitted

}
 6fc:	08 95       	ret

000006fe <TWI_WRITE>:
//================================================================================
void TWI_WRITE(unsigned char DATA)
{
	TWDR = DATA;//slave address  and write state 
 6fe:	83 b9       	out	0x03, r24	; 3

  	TWCR = (1<<TWINT) | (1<<TWEN);
 700:	84 e8       	ldi	r24, 0x84	; 132
 702:	86 bf       	out	0x36, r24	; 54

	// ClearTWINT bit in TWCR to start transmission of address

	while (!(TWCR & (1<<TWINT)));
 704:	06 b6       	in	r0, 0x36	; 54
 706:	07 fe       	sbrs	r0, 7
 708:	fd cf       	rjmp	.-6      	; 0x704 <TWI_WRITE+0x6>
	

	
}
 70a:	08 95       	ret

0000070c <TWI_READ>:

 char TWI_READ( void)
{
	
	char x;
	TWCR = (1 << TWINT) | (1 << TWEN);
 70c:	84 e8       	ldi	r24, 0x84	; 132
 70e:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 710:	06 b6       	in	r0, 0x36	; 54
 712:	07 fe       	sbrs	r0, 7
 714:	fd cf       	rjmp	.-6      	; 0x710 <TWI_READ+0x4>
    x=TWDR;
 716:	83 b1       	in	r24, 0x03	; 3
    return x;

}
 718:	08 95       	ret

0000071a <TWI_SEND_STOP>:
//==============================================================
void TWI_SEND_STOP(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 71a:	84 e9       	ldi	r24, 0x94	; 148
 71c:	86 bf       	out	0x36, r24	; 54
	/**
		Transmit STOP condition **/
}
 71e:	08 95       	ret

00000720 <send_ack>:
//============================================================
void send_ack(void)
{
	TWCR = (1 << TWINT) | (1 << TWEN)|(1<<TWEA);
 720:	84 ec       	ldi	r24, 0xC4	; 196
 722:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
 724:	06 b6       	in	r0, 0x36	; 54
 726:	07 fe       	sbrs	r0, 7
 728:	fd cf       	rjmp	.-6      	; 0x724 <send_ack+0x4>

}
 72a:	08 95       	ret

0000072c <UART_SEND_CHAR>:
#include <avr/io.h>
#include <avr/interrupt.h>
void UART_SEND_CHAR(char data)
{
	while(!(UCSRA&1<<UDRE));
 72c:	5d 9b       	sbis	0x0b, 5	; 11
 72e:	fe cf       	rjmp	.-4      	; 0x72c <UART_SEND_CHAR>
	UDR=data;
 730:	8c b9       	out	0x0c, r24	; 12
}
 732:	08 95       	ret

00000734 <UART_ERECEIVE_CHAR>:
unsigned char UART_ERECEIVE_CHAR(void)
{
	while(!(UCSRA&1<<RXC));
 734:	5f 9b       	sbis	0x0b, 7	; 11
 736:	fe cf       	rjmp	.-4      	; 0x734 <UART_ERECEIVE_CHAR>
	return UDR;
 738:	8c b1       	in	r24, 0x0c	; 12
}
 73a:	08 95       	ret

0000073c <UART_SEND_STRING>:
void UART_SEND_STRING(char* string)
{
 73c:	fc 01       	movw	r30, r24
 73e:	04 c0       	rjmp	.+8      	; 0x748 <UART_SEND_STRING+0xc>
#include <avr/io.h>
#include <avr/interrupt.h>
void UART_SEND_CHAR(char data)
{
	while(!(UCSRA&1<<UDRE));
 740:	5d 9b       	sbis	0x0b, 5	; 11
 742:	fe cf       	rjmp	.-4      	; 0x740 <UART_SEND_STRING+0x4>
	return UDR;
}
void UART_SEND_STRING(char* string)
{
	while (*string!='\0')
	UART_SEND_CHAR(* string++);
 744:	31 96       	adiw	r30, 0x01	; 1
#include <avr/io.h>
#include <avr/interrupt.h>
void UART_SEND_CHAR(char data)
{
	while(!(UCSRA&1<<UDRE));
	UDR=data;
 746:	8c b9       	out	0x0c, r24	; 12
	while(!(UCSRA&1<<RXC));
	return UDR;
}
void UART_SEND_STRING(char* string)
{
	while (*string!='\0')
 748:	80 81       	ld	r24, Z
 74a:	88 23       	and	r24, r24
 74c:	c9 f7       	brne	.-14     	; 0x740 <UART_SEND_STRING+0x4>
	UART_SEND_CHAR(* string++);

}
 74e:	08 95       	ret

00000750 <_exit>:
 750:	f8 94       	cli

00000752 <__stop_program>:
 752:	ff cf       	rjmp	.-2      	; 0x752 <__stop_program>
